---
- name: Include OS-specific variables
  include_vars: "{{ ansible_facts['os_family']  }}.yaml"

- name: Install required system packages
  package:
    state: present
    name: "{{ docker_deps }}"

- name: Install Docker
  when: ansible_facts['distribution'] == 'Ubuntu'
  block:
    - name: Add Docker GPG apt key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/trusted.gpg.d/docker.gpg.asc
        mode: 0744
        owner: "{{ username }}"
        group: "{{ username }}"
      become: true

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

- name: Update apt and install docker-ce  # noqa package-latest
  when: ansible_facts['os_family'] == 'Debian'
  apt:
    update_cache: true
    name: "{{ docker_packages }}"
    state: latest

- name: Ensure group docker exists
  group:
    name: docker
    state: present

- name: Add user "{{ username }} to group docker"
  user:
    name: '{{ username }}'
    groups:
      - docker
    append: true

- name: Install Docker Module for Python
  pip:
    name: docker

- name: Make sure Docker is running and enabled
  service:
    name: docker
    state: started
    enabled: true
  register: docker_service
  when: inventory_hostname != 'localhost'

- name: Restart the Docker service in virtual environment (hacky solution for local testing)
  block:
    - name: Check for the docker service status, it errors out for some reason  # noqa command-instead-of-module
      command:
        cmd: service docker status
      register: docker_status
      ignore_errors: true
      changed_when: false

    - name: Start the docker service, forcing it to load (systemd)  # noqa command-instead-of-module
      command:
        cmd: service docker start
      when: "'is not running' in docker_status.stdout"
  become: true
  when: inventory_hostname == 'localhost'

- name: Get a list of containers
  delegate_to: localhost
  become: false
  find:
    paths:
      - "roles/containers"
    file_type: directory
    recurse: false
  register: containers

- name: Stop and remove all the disabled containers
  docker_container:
    name: "{{ item.path.split('/')[-1] }}"
    state: absent
  when: not lookup('vars', 'enable_' + item.path.split('/')[-1])
  with_items: "{{ containers.files }}"

- name: Handle persistent data
  when: "'fragile' in inventory_hostname"
  block:
    - name: Check if the persistent data folder exists on the remote machine
      stat:
        path: "{{ docker_dir }}"
      register: persistent_data

    - name: Check if the persistent data folder is empty
      when: "'fragile' in inventory_hostname"
      find:
        paths:
          - "{{ docker_dir }}/"
        recurse: true
      register: persistent_data_find

    - name: Create the persistent data folder on the remote machine
      file:
        dest: "{{ docker_dir }}"
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        recurse: true
      when: not persistent_data.stat.exists

    - name: Restore the "{{ docker_dir }}" folder from the NAS server
      when: persistent_data_find.matched < 20 or not persistent_data.stat.exists
      shell:
        cmd: "scp -l {{ nas_username }} -p {{ nas_password }} /shared/docker/* /docker_data/data/{{ docker_dir }}/"

    - name: Chmod the data folder
      file:
        dest: "{{ docker_dir }}"
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        recurse: true
